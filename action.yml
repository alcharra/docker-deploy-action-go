name: "Docker Deploy Action (Go)"
description: "Uploads Docker Compose/Stack files and deploys via SSH using a Go-based binary"
author: "alcharra"
branding:
  icon: "upload-cloud"
  color: "blue"

inputs:
  ssh_host:
    description: "The target server's hostname or IP address."
    required: true
  ssh_port:
    description: "The port to use for the SSH connection."
    required: false
    default: "22"
  ssh_user:
    description: "The username used to establish the SSH connection."
    required: true
  ssh_key:
    description: "The private SSH key used to authenticate the connection."
    required: true
  ssh_key_passphrase:
    description: "Passphrase for the encrypted SSH private key"
    required: false
  ssh_known_hosts:
    description: "Contents of the SSH known_hosts file used to verify the server's host key."
    required: false
  fingerprint:
    description: "The SSH host fingerprint used to verify the server's identity (SHA256 format)."
    required: false
  timeout:
    description: "SSH connection timeout (e.g. 10s, 30s, 1m)."
    required: false
    default: "10s"
  project_path:
    description: "The remote directory on the server where files should be uploaded."
    required: true
  deploy_file:
    description: "The path to the file used to define the deployment (e.g. Docker Compose or Stack file)."
    required: true
    default: "docker-compose.yml"
  extra_files:
    description: "Comma-separated list of additional files to upload (e.g. .env, config.yml)."
    required: false
  mode:
    description: "The deployment mode to use (e.g. 'compose' or 'stack')."
    required: false
    default: "compose"
  stack_name:
    description: "The name of the stack to deploy (required if mode is set to 'stack')."
    required: false
  compose_pull:
    description: "Whether to pull the latest images before bringing up services with Docker Compose (true/false)."
    required: false
    default: "true"
  compose_build:
    description: "Whether to build images before starting services with Docker Compose (true/false)."
    required: false
    default: "false"
  compose_no_deps:
    description: "Whether to skip starting linked services (dependencies) with Docker Compose (true/false)."
    required: false
    default: "false"
  compose_target_services:
    description: "Comma-separated list of services to restart (e.g. web,db) - Restarts all if unset."
    required: false
  docker_network:
    description: "The name of the network to be used for deployment (created if it does not exist)."
    required: false
  docker_network_driver:
    description: "The driver to use for the network (e.g. bridge, overlay, macvlan)."
    required: false
    default: "bridge"
  docker_network_attachable:
    description: "Whether standalone containers should be allowed to attach to the network (true/false)."
    required: false
    default: "false"
  docker_prune:
    description: "Specify a prune option to clean up unused resources: system, volumes, networks, images, containers, or none."
    required: false
    default: "none"
  registry_host:
    description: "The host address for the remote registry or service requiring authentication."
    required: true
  registry_user:
    description: "The username used for authenticating with the registry or remote service."
    required: true
  registry_pass:
    description: "The password or token used for authenticating with the registry or remote service."
    required: true
  enable_rollback:
    description: "Whether to enable automatic rollback if the deployment fails (true/false)."
    required: false
    default: "false"
  env_vars:
    description: "Environment variables to write to a .env file and upload to the server."
    required: false

runs:
  using: "composite"
  steps:
    - name: Run Docker Deploy (Go)
      shell: bash
      run: ${{ github.action_path }}/docker-deploy-action-go
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        RELEASE_VERSION: ${{ github.action_ref }}
        SSH_HOST: ${{ inputs.ssh_host }}
        SSH_PORT: ${{ inputs.ssh_port }}
        SSH_USER: ${{ inputs.ssh_user }}
        SSH_KEY: ${{ inputs.ssh_key }}
        SSH_KEY_PASSPHRASE: ${{ inputs.ssh_key_passphrase }}
        SSH_KNOWN_HOSTS: ${{ inputs.ssh_known_hosts }}
        FINGERPRINT: ${{ inputs.fingerprint }}
        TIMEOUT: ${{ inputs.timeout }}
        PROJECT_PATH: ${{ inputs.project_path }}
        DEPLOY_FILE: ${{ inputs.deploy_file }}
        EXTRA_FILES: ${{ inputs.extra_files }}
        DOCKER_PRUNE: ${{ inputs.docker_prune }}
        MODE: ${{ inputs.mode }}
        STACK_NAME: ${{ inputs.stack_name }}
        COMPOSE_PULL: ${{ inputs.compose_pull }}
        COMPOSE_BUILD: ${{ inputs.compose_build }}
        COMPOSE_NO_DEPS: ${{ inputs.compose_no_deps }}
        COMPOSE_TARGET_SERVICES: ${{ inputs.compose_target_services }}
        DOCKER_NETWORK: ${{ inputs.docker_network }}
        DOCKER_NETWORK_DRIVER: ${{ inputs.docker_network_driver }}
        DOCKER_NETWORK_ATTACHABLE: ${{ inputs.docker_network_attachable }}
        REGISTRY_HOST: ${{ inputs.registry_host }}
        REGISTRY_USER: ${{ inputs.registry_user }}
        REGISTRY_PASS: ${{ inputs.registry_pass }}
        ENABLE_ROLLBACK: ${{ inputs.enable_rollback }}
        ENV_VARS: ${{ inputs.env_vars }}